n = 100;  % set some number of iterations , may need adjusting
error = 10^-15;

% initial values for iteration
x_values = zeros(2,n);
x_values(1,1) = 2;
x_inits = [1.1, 1.1; 2.0, 0.5; 3.0, 5.0];
% pair of equations to solve
% from here on out, x = x1 and y = x2 in the assignment
syms x y;               % create the symbols for functions
f1 = @(x,y) (x.^2.+y^2-2);  % f1
f2 = @(x,y) (exp(.-x-1);  % f2

% Calculate the entries for the Jacobian matrix
a = matlabFunction(diff(f1(x,y),x)); % df1_dx
b = matlabFunction(diff(f2(x,y),x)); % df2_dx = -1
c = matlabFunction(diff(f1(x,y),y)); % df1_dy = 1
d = matlabFunction(diff(f2(x,y),y)); % df2_dy

for i = 1:n-1
    x = x_values(:,i);                  % x values for this iteration
    J_x = [a(x(1)) b(); c() d(x(2))];   % calculate the Jacobian matrix
    x_next = x - J_x\[f1(x(1),x(2)); f2(x(1),x(2))]; 
    x_values(:,i+1) = x_next;
    if f1(x_next(1,1),x_next(2,1)) < error && f2(x_next(1,1),x_next(2,1)) < error
        n = i;
        break;
    end
end

n_space = linspace(1,n,n);

figure('Name', 'Convergence of Functions f1 and f2 with Respect to Number of Iterations')         % figure title              
plot(n_space, f1(x_values(1,1:n), x_values(2,1:n)), 'o-', n_space, f2(x_values(1,1:n), x_values(2,1:n)), '.-.');                     % plotting Composite Midpoint error against error = 0
legend show;                                        % show legends!
legend('f1(x1, x2)','f2(f1, f2)');            % set legends
grid on;                                            % turn grids on
title(sprintf('Convergence of Functions f1 and f2 with Respect to Number of Iterations')); % plot title
xlabel('Iteration Number')                                         % x-axis label
ylabel('Function Values')       % y-axis label

fun = @fsolver;
exact1 = fsolve(fun,[x_inits(1,1) x_inits(1,2)]);
exact2 = fsolve(fun,[x_inits(2,1) x_inits(2,2)]);
exact3 = fsolve(fun,[x_inits(3,1) x_inits(3,2)]);