clear all;                   % clears plotclose all;                   % closes plotxlim = [-1 1];               % establish range for xu = linspace(-1,1,1001);     % 1001 points between -1 and 1iplot = 0;                   % figure countern = [28 36 44 52 60];        % polynomial of degreesfor idx = 1:numel(n)   deg = n(idx);              % goes thru each degree of n  x = linspace(-1,1,deg+1);  % equidistant x points  y = GelbTanner(x);         % y is hubbard using degree n   y1k = GelbTanner(u);       % y1k is hubbard using 1001 points  v = polyinterp(x,y,u);     % polyinterp on GelbTanner    % error calculations for equi-distant polyinterp  errorEqui = v - y1k';            % error calcuation: difference between polyinterp and GelbTanner  % error norm averages with respect to p-norm value, of equidistant  L1Equi = norm(errorEqui, 1) / (1000 - 1);              % L1  L2Equi = norm(errorEqui, 2) / (1000 - 1);              % L2  LInfEqui = norm(errorEqui, Inf) / (1000 - 1);          % LINF    %{  fprintf('n = %2.0f\n',deg);  fprintf('Equi-distant Errors\n');  fprintf('L1 for %i: %i\n', deg, L1Equi)  fprintf('L2 for %i: %i\n', deg, L2Equi)  fprintf('Linf for %i: %i\n\n', deg, LInfEqui)  %}    % begin chebyshev - plot on another figure  i = linspace(0, deg+1, deg+1);    % i = 1 ... N  yo = cos(pi * i / deg);           % need these preliminary y-values to calculate Cheby x-values  xi = yo;                          % actual Cheby x-values  yi = GelbTanner(xi);              % GelbTanner plotted w/ Cheby points  vi = polyinterp(xi,yi,u);         % polyinterp of Hubbard using Cheby points across 1001 points  yu = GelbTanner(u);               % true GelbTanner solution over 1001 points    % Same error calculation as lines 17 to 21, but with Cheby polyinterp  errorCheby = vi - y1k';            % error calcuation: difference between polyinterp and GelbTanner  L1Cheby = norm(errorCheby, 1) / (1000 - 1);              % L1  L2Cheby = norm(errorCheby, 2) / (1000 - 1);              % L2  LInfCheby = norm(errorCheby, Inf) / (1000 - 1);          % LINF  %{  fprintf('Chebyshev Errors\n');  fprintf('L1 for %i: %i\n', deg, L1Cheby)  fprintf('L2 for %i: %i\n', deg, L2Cheby)  fprintf('Linf for %i: %i\n\n', deg, LInfCheby)  %}    % plotting the equi, cheby, and error graphs  iplot = iplot + 1;                % plot iterator  figure(iplot);                    % new figure  subplot(2,2,[1 2]);               % equi-distant polyinterp on top half  plot(x, y, 'o', u, v, 'r');       % plotting true GelbTanner over n+1 equidistant points and polyinterp hubbard over 1001 points  legend('Data', 'PolyInterp')      % self-explanatory...  grid on;                          % turn grid on for better visibility  title(sprintf('Equal Spacing Polyinterp (n = %2.0f)',deg));    %same as lines 54 to 58, except plotting the Cheby points and polyinterp  subplot(2,2,[3 4]);  plot(xi,yi,'o',u,vi,'r');  legend('Data', 'PolyInterp');  grid on;  title(sprintf('Chebyshev Spacing Polyinterp (n = %2.0f)',deg));    % plotting the error  iplot = iplot + 1;                    % plot iterator  figure(iplot);                        % new plot  plot(u, errorCheby, u, errorEqui);    % plotting the errors of polyinterp   legend('Equidistant points', 'Chebyshev Points'); % for equidistant and cheby points  grid on;  title(sprintf('Error Graphs(n = %2.0f)',deg));end