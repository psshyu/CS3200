clear all;                      % clears plotclose all;                      % closes plotxlim = [0 1];                   % establish range for xt = 0.25;uH = linspace(0,1,1001);        % 1001 points between 0 and 1uG = linspace(-1,1,1001);       % 1001 points between -1 and 1y1kG = GelbTanner(uG);          % GelbTanner true solution over 1001 pointsy1kH = hubbard(uH, t);          % Hubbard true solution over 1001 pointsiplot = 0;                      % figure countern = [28 36 44 52 60];           % polynomial of degreesfor idx = 1:numel(n)  deg = n(idx);                 % goes thru each degree of n    % Hubbard Calculations  xH = linspace(0,1,deg+1);     % n + 1 equidistant points over [0 1]  yH = hubbard(xH,t);           % hubbard using xH points  pH = pchip(xH,yH,uH);         % pchip Hubbard interp over 1001 points  sH = spline(xH,yH,uH);        % Spline Hubbard interp over 1001 points  % PCHIP error calculations for Hubbard  errorPCHIP_H = pH - y1kH';            % error calcuation: difference between polyinterp and true Hubbard  L1_PCHIP_H = norm(errorPCHIP_H, 1);   % L1 average  L2_PCHIP_H = norm(errorPCHIP_H, 2);   % L2 average  Linf_PCHIP_H = norm(errorPCHIP_H, inf);% L infinity average  % Spline error calculations for Hubbard  % literally a repeat of 22-25, but with spline interp instead of pchip  errorSpline_H = sH - y1kH';  L1_Spline_H = norm(errorSpline_H, 1);  L2_Spline_H = norm(errorSpline_H, 2);  Linf_Spline_H = norm(errorSpline_H, inf);  % GelbTanner Calculations  % This is a massive copy-pasta of lines 17-31, but with GelbTanner  % and the domain is now [-1 1] instead of [0 1]  xG = linspace(-1,1,deg+1);    % equidistant x points between -1 and 1  yG = GelbTanner(xG);            pG = pchip(xG,yG,uG);           sG = spline(xG,yG,uG);  % PCHIP error calculations for GelbTanner  errorPCHIP_G = pG - y1kG';  L1_PCHIP_G = norm(errorPCHIP_G, 1);  L2_PCHIP_G = norm(errorPCHIP_G, 2);  Linf_PCHIP_G = norm(errorPCHIP_G, inf);  % Spline error calculations for GelbTanner  errorSpline_G = sG - y1kG';  L1_Spline_G = norm(errorSpline_G, 1);  L2_Spline_G = norm(errorSpline_G, 2);  Linf_Spline_G = norm(errorSpline_G, inf);    %{  fprintf('Hubbard n = %2.0f\n',deg);  fprintf('Spline Errors\n');  fprintf('L1 for %i: %i\n', deg, L1_Spline_H)  fprintf('L2 for %i: %i\n', deg, L2_Spline_H)  fprintf('Linf for %i: %i\n', deg, Linf_Spline_H)  fprintf('PCHIP Errors\n');  fprintf('L1 for %i: %i\n', deg, L1_PCHIP_H)  fprintf('L2 for %i: %i\n', deg, L2_PCHIP_H)  fprintf('Linf for %i: %i\n\n', deg, Linf_PCHIP_H);  fprintf('GelbTanner n = %2.0f\n',deg);  fprintf('Spline Errors\n');  fprintf('L1 for %i: %i\n', deg, L1_Spline_G)  fprintf('L2 for %i: %i\n', deg, L2_Spline_G)  fprintf('Linf for %i: %i\n', deg, Linf_Spline_G)  fprintf('PCHIP Errors\n');  fprintf('L1 for %i: %i\n', deg, L1_PCHIP_G)  fprintf('L2 for %i: %i\n', deg, L2_PCHIP_G)  fprintf('Linf for %i: %i\n\n', deg, Linf_PCHIP_G);  %}  iplot = iplot + 1;  figure(iplot)     % Plots for the Hubbard & GelbTanner Spline and PCHIP  subplot(2,1,1);   % Hubbard plot  % plotting Hubbard w/ n + 1 equally spaced points  % along with the spline and pchip interp over 1001 points  plot(xH,yH,'o',uH,pH,'-',uH,sH,'-.')   legend('Sample Points', 'pchip', 'spline')  title(sprintf('Hubbard Spline and PCHIP (n = %2.0f)',deg))    % Same thing as above, but with GelbTanner  subplot(2,1,2);   % GelbTanner plot  plot(xG,yG,'o',uG,pG,'-',uG,sG,'-.')  legend('Sample Points', 'pchip', 'spline')  title(sprintf('GelbTanner Spline and PCHIP (n = %2.0f)',deg))    % Begin plotting errors  iplot = iplot + 1;  figure(iplot)     % new plot for errors  subplot(2,1,1);   % Hubbard error plot  % Plotting the PCHIP and Spline errors over 1001 points  plot(uH, errorPCHIP_H, uH, errorSpline_H);  legend('PCHIP error', 'Spline error')  title(sprintf('Hubbard Spline and PCHIP Errors (n = %2.0f)',deg))    % Same thing as above, but with GelbTanner  subplot(2,1,2);   % GelbTanner error plot  plot(uG, errorPCHIP_G, uG, errorSpline_G);  legend('PCHIP error', 'Spline error')  title(sprintf('GelbTanner Spline and PCHIP Errors (n = %2.0f)',deg))end