clear all;                  % clears plotclose all;                  % closes plotxlim = [0 1];               % establish range for xt = 0.25;                   % time for Hubbard u = linspace(0,1,1001);     % 1001 points between 0 and 1y1k = hubbard(u,t);         % y1k is hubbard using 1001 pointsiplot = 0;                  % this will be a figure iteratorn = [28 36 44 52 60];       % polynomials of degreefor idx = 1:numel(n)        % for loop to go thru all n  deg = n(idx);             % goes thru each degree of n  x = linspace(0,1,deg+1);  % equidistant x points  y = hubbard(x,t);         % y is hubbard using degree n   v = polyinterp(x,y,u);    % polyinterp on hubbard    % error calculations for equi-distant polyinterp  errorEqui = v - y1k';            % error calcuation: difference between polyinterp and hubbard over 1001 points  % error norm average calculation, with respect to p-norm  L1Equi = norm(errorEqui, 1) / (1000 - 1);              % L1  L2Equi = norm(errorEqui, 2) / (1000 - 1);              % L2  LInfEqui = norm(errorEqui, Inf) / (1000 - 1);          % L-infinity    % begin chebyshev calculations  i = linspace(0,deg+1,deg+1);      % i = 1 ... to degree n  yo = cos(pi * i / deg);           % need these preliminary y-values to calculate Cheby x-values  xi = (1 - yo) / 2;                % actual Cheby x-values  yi = hubbard(xi,t);               % Hubbard plotted w/ Cheby points  vi = polyinterp(xi,yi,u);         % polyinterp of Hubbard using Cheby points across 1001 points    % error calculations for Chebyshev polyinterp  errorCheby = vi - y1k';            % error calcuation: difference between polyinterp and hubbard over 1001 points  % error calculations for equi-distant polyinterp  L1Cheby = norm(errorCheby, 1) / (1000 - 1);              % L1  L2Cheby = norm(errorCheby, 2) / (1000 - 1);              % L2  LInfCheby = norm(errorCheby, Inf) / (1000 - 1);          % LINF    %{  These are just print statements for the error norms  fprintf('n = %2.0f\n',deg);  fprintf('Equi-distant Errors\n');  fprintf('L1 for %i: %i\n', deg, L1Equi)  fprintf('L2 for %i: %i\n', deg, L2Equi)  fprintf('Linf for %i: %i\n\n', deg, LInfEqui)  fprintf('Chebyshev Errors\n');  fprintf('L1 for %i: %i\n', deg, L1Cheby)  fprintf('L2 for %i: %i\n', deg, L2Cheby)  fprintf('Linf for %i: %i\n\n', deg, LInfCheby)  %}    % plotting the equi and cheby graphs  iplot = iplot + 1;  figure(iplot)                     % new figure     subplot(2,2,[1 2]);               % top half of figure will be the equi-points  plot(x, y, 'o', u, v, 'r');       % plotting true hubbard over n+1 equidistant points and polyinterp hubbard over 1001 points  legend('Data', 'PolyInterp');     % self explanatory...  grid on;                          % turning background grid on for easy viewing  title(sprintf('Equal Spacing PolyInterp (n = %2.0f)',deg)) %title of graph    subplot(2,2,[3 4]);               % these 5 lines are basically doing the same  plot(xi,yi,'o',u,vi,'r');         % thing as the above 5, but with cheby points  legend('Data', 'PolyInterp');     % instead of equidistant points  grid on  title(sprintf('Chebyshev Spacing PolyInterp (n = %2.0f)',deg))    % plotting the error  iplot = iplot + 1;              figure(iplot);                    % new plot  plot(u, errorEqui, u, errorCheby);% plotting the errors of polyinterp    legend show;                      % of equidistant and cheby points  legend('Equidistant PolyInterp Error', 'Chebyshev PolyInterpError');  grid on;  title(sprintf('Error Graph (n = %2.0f)',deg));end